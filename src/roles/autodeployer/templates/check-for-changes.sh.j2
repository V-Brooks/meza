#!/bin/sh
#
# Check for changes to Meza and public config repository, then deploy as needed
#
# Run this command without args:
#
#     sudo ./check-for-changes.sh
#
# Or in a passwordless sudoer's (e.g. root) crontab like:
#
#     22 * * * * /opt/meza/src/scripts/autodeployer/check-for-changes.sh >> /opt/data-meza/logs/autodeploy-`date "+\%Y-\%m-\%d"`.log 2>&1
#

# Don't allow errors
set -e

echo "Start meza auto-deployer"
echo $(date "+%Y-%m-%d %H:%M:%S")

# Path to this file's directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# must be root or sudoer
if [ "$(whoami)" != "root" ]; then
	echo "Try running this script with sudo: \"sudo bash unite-the-wikis.sh\""
	exit 1
fi

# Gets initial config defined by secret and public config (and Meza defaults).
# Really all this does is grabs $m_environment, but instead whatever is calling
# this script should pass that in as an argument.
source /opt/.deploy-meza/config.sh

# Now that $m_environment is available, force update of config.sh using the
# `meza setbaseconfig` command. This will rebuild config.sh based upon current
# state of secret config, public config, and Meza.
meza setbaseconfig "$m_environment"
source /opt/.deploy-meza/config.sh

#
# Check if deploy is underway
#
meza deploy-check "$m_environment"
if [ $? -eq 0 ]; then
	echo "Checked if deploy underway. Is not. Placing deploy lock while checking for changes."
	meza deploy-lock "$m_environment"
else
	echo "Deploy is underway. Exiting."
	exit 1
fi


if [ -z "$local_config_repo_repo$secret_config_repo_repo$enforce_meza_version" ]; then
	>&2 echo "Auto-deploy requires a public config, secret config, or Meza version to be set."
	exit 1;
fi

# Set Slack notify variables that are the same for all notifications
if [ ! -z "$autodeployer_slack_token"    ]; then    SLACK_TOKEN="$autodeployer_slack_token";    fi
if [ ! -z "$autodeployer_slack_username" ]; then SLACK_USERNAME="$autodeployer_slack_username"; fi
if [ ! -z "$autodeployer_slack_channel"  ]; then  SLACK_CHANNEL="$autodeployer_slack_channel";  fi
if [ ! -z "$autodeployer_slack_icon_url" ]; then SLACK_ICON_URL="$autodeployer_slack_icon_url"; fi


# If SLACK_TOKEN is set, send notification via slack. Else, use no-notify script
if [ ! -z "$SLACK_TOKEN" ]; then
	NOTIFY="$DIR/slack-notify.sh"
else
	NOTIFY="$DIR/no-notify.sh"
fi

GIT_FETCH="$DIR/git-fetch.sh"

#
# If management of SECRET config desired
#
if [ ! -z "$secret_config_repo_repo" ]; then

	SECRET_CONFIG_DEST="/opt/conf-meza/secret"
	SECRET_CONFIG_REPO="$secret_config_repo_repo"
	SECRET_CONFIG_VERSION="$secret_config_repo_version"

	source "$DIR/repo-pull.sh" "secret config" "$SECRET_CONFIG_DEST" "$SECRET_CONFIG_REPO" "$SECRET_CONFIG_VERSION"
	SECRET_CONFIG_DIFF="$DIFF"
	SECRET_CONFIG_BEFORE_HASH="$BEFORE_HASH"
	SECRET_CONFIG_AFTER_HASH="$AFTER_HASH"
	SECRET_CONFIG_COMMITS="$COMMITS"
fi


#
# If management of PUBLIC config desired
#
if [ ! -z "$local_config_repo_repo" ]; then

	PUBLIC_CONFIG_DEST="/opt/conf-meza/public"
	PUBLIC_CONFIG_REPO="$local_config_repo_repo"
	PUBLIC_CONFIG_VERSION="$local_config_repo_version"

	source "$DIR/repo-pull.sh" "public config" "$PUBLIC_CONFIG_DEST" "$PUBLIC_CONFIG_REPO" "$PUBLIC_CONFIG_VERSION"
	PUBLIC_CONFIG_DIFF="$DIFF"
	PUBLIC_CONFIG_BEFORE_HASH="$BEFORE_HASH"
	PUBLIC_CONFIG_AFTER_HASH="$AFTER_HASH"
	PUBLIC_CONFIG_COMMITS="$COMMITS"

fi


#
# If management of Meza version desired
#
if [ ! -z "$enforce_meza_version" ]; then

	# Set MEZA version
	MEZA_REPO="https://github.com/enterprisemediawiki/meza"
	MEZA_DEST="/opt/meza"
	MEZA_VERSION="$enforce_meza_version"

	source "$DIR/repo-pull.sh" "public config" "$MEZA_DEST" "$MEZA_REPO" "$MEZA_VERSION"
	MEZA_DIFF="$DIFF"
	MEZA_BEFORE_HASH="$BEFORE_HASH"
	MEZA_AFTER_HASH="$AFTER_HASH"
	MEZA_COMMITS="$COMMITS"

fi


#
# Meza, public, and secret config all unchanged? Exit.
#
if [ -z "$SECRET_CONFIG_AFTER_HASH$PUBLIC_CONFIG_AFTER_HASH$MEZA_AFTER_HASH" ]; then
	meza deploy-unlock "$m_environment"
	echo "Nothing to deploy"
	exit 0;
fi

#
# Notify if SECRET CONFIG changed
#
if [ ! -z "$SECRET_CONFIG_AFTER_HASH" ]; then
	# arg 5 = commits, 6 = diff. Don't show for secret config
	source "$DIR/diff-notify.sh" "Secret config" "$SECRET_CONFIG_BEFORE_HASH" "$SECRET_CONFIG_AFTER_HASH" "$SECRET_CONFIG_VERSION" "" ""
fi

#
# Notify if PUBLIC CONFIG changed
#
if [ ! -z "$PUBLIC_CONFIG_AFTER_HASH" ]; then
	source "$DIR/diff-notify.sh" "Public config" "$PUBLIC_CONFIG_BEFORE_HASH" "$PUBLIC_CONFIG_AFTER_HASH" "$PUBLIC_CONFIG_VERSION" "$PUBLIC_CONFIG_COMMITS" "$PUBLIC_CONFIG_DIFF"
fi

#
# Notify if MEZA changed
#
if [ ! -z "$MEZA_AFTER_HASH" ]; then
	# Don't show arg 6 (diff) for Meza (often too long)
	source "$DIR/diff-notify.sh" "Meza" "$MEZA_BEFORE_HASH" "$MEZA_AFTER_HASH" "$MEZA_VERSION" "$MEZA_COMMITS" ""
fi


#
# Do deploy
#
echo "Deploying"
# Allow overriding variables by only setting them if they're empty
if [ -z "$DEPLOY_TYPE"       ]; then DEPLOY_TYPE="Deploy";                            fi
if [ -z "$DEPLOY_ARGS"       ]; then DEPLOY_ARGS="";                                  fi
if [ -z "$DEPLOY_LOG_PREFIX" ]; then DEPLOY_LOG_PREFIX="deploy-after-config-change-"; fi

# This isn't perfect, as there is still a little that will happen in do-deploy
# below before the actual deploy starts, and a separate deploy _could_ start
# in between now and then, but the likelihood is low, and the impact is only
# this deploy wouldn't happen since it's actual deploy would check for the lock
# file and would fail/exit.
meza deploy-unlock "$m_environment"

source "$DIR/do-deploy.sh"
echo "Done"
